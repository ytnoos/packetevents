plugins {
    id 'fabric-loom'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.codemc.io/repository/maven-snapshots/' }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

configurations {
    includeAll
}

dependencies {
    api project(':api')
    api project(':netty-common')
    implementation(adventureDependencies)

    includeAll(adventureDependencies)
    include(project(':api'))
    include(project(':netty-common'))

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_mappings}")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

def includeDependency(ResolvedDependency dependency) {
    configurations.named("include").get().withDependencies {
        it.add(dependencyFactory.create(
                dependency.moduleGroup,
                dependency.moduleName,
                dependency.moduleVersion
        ))
    }
    dependency.getChildren().forEach { includeDependency(it) }
}

tasks.remapJar {
    configurations.named("includeAll")
            .get()
            .getResolvedConfiguration()
            .getFirstLevelModuleDependencies()
            .forEach { includeDependency(it) }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    //withSourcesJar()
}


remapJar {
    archiveBaseName.set("${rootProject.name}-fabric")
}